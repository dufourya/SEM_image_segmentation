#!/usr/bin/env python

import os
import subprocess
import glob

# import socket
import re
import getpass

user_name = getpass.getuser()
# print user_name
# hostname = socket.gethostname()
workdir = os.path.abspath(".")
# print workdir
# out_dir = os.path.join(workdir, 'outputs')
code_base = "/mnt/research/dufourlab/GitLab/SEManalysis/"
# code_base = '/Users/yanndufour/Documents/Microscope/'
out_dir = os.path.join(workdir, "hpc_log_files/")
git_dir = os.path.join(code_base, ".git/")
# print code_base
# print git_dir
git_prefix = ("git --git-dir={0} --work-tree={1} ").format(git_dir, code_base)
check_staged = "diff-index --quiet --cached HEAD"
check_unstaged = "diff --quiet"
has_changes = False

try:
    subprocess.check_call(git_prefix + check_staged, shell=True)
except subprocess.CalledProcessError:
    print("You have staged changes in your repository.")
    has_changes = True
try:
    subprocess.check_call(git_prefix + check_unstaged, shell=True)
except subprocess.CalledProcessError:
    print("You have unstaged changes in your repository.")
    has_changes = True

# has_changes = False

if has_changes:
    print("Please commit or revert them to continue.")
    exit(1)
else:
    get_hash = "rev-parse --verify HEAD"
    args = git_prefix + get_hash
    # print args
    # repo_hash = subprocess.Popen(['ls','-l'],stdout=subprocess.PIPE).communicate()[0]
    # print repo_hash
    repo_hash = (
        subprocess.Popen(args, shell=True, stdout=subprocess.PIPE)
        .communicate()[0]
        .rstrip()
    )
    # print repo_hash

imgFolders = [f for f in glob.glob("*") if os.path.isdir(f)]
# print imgFolders

if len(imgFolders) > 0:
    if not os.path.exists(out_dir):
        os.mkdir(out_dir)
    script_file = open(out_dir + "submit_jobs.sh", "w")
    script_file.write("#!/bin/bash\n")
    script_file.write("#Github Microscope hash:" + repo_hash.decode("utf-8") + "\n")
    for imgFolder in imgFolders:
        qsub_file_name = imgFolder + ".sb"
        lines = []
        lines.append("#!/bin/bash --login")
        lines.append("#SBATCH --job-name=" + imgFolder)
        lines.append("#SBATCH --mail-user=" + user_name + "@msu.edu")
        lines.append("#SBATCH --mail-type=FAIL")
        lines.append("#SBATCH --ntasks=1")
        lines.append("#SBATCH --cpus-per-task=1")
        lines.append("#SBATCH --tasks-per-node=1")
        lines.append("#SBATCH --time=03:59:00")
        lines.append("#SBATCH --mem=32G")
        lines.append("#SBATCH --output=" + out_dir + imgFolder + "_out")
        lines.append("#SBATCH --error=" + out_dir + imgFolder + "_error")
        lines.append("cd $SLURM_SUBMIT_DIR")
        lines.append("module load MATLAB-Compiler/2018a")
        lines.append(code_base + "runSEMSingle " + workdir + "/" + imgFolder)
        qsub = "\n".join(lines)
        qsub_file = open(out_dir + qsub_file_name, "w")
        qsub_file.write(qsub)
        qsub_file.close()
        script_file.write("sbatch " + out_dir + qsub_file_name + "\n")
    script_file.close()
    subprocess.call("sh " + out_dir + "submit_jobs.sh", shell=True)
else:
    print("No images to process in this folder.")
